a:6:{s:9:"classesIn";a:1:{s:49:"SebastianBergmann\Comparator\ObjectComparatorTest";a:6:{s:4:"name";s:20:"ObjectComparatorTest";s:14:"namespacedName";s:49:"SebastianBergmann\Comparator\ObjectComparatorTest";s:9:"namespace";s:28:"SebastianBergmann\Comparator";s:9:"startLine";i:18;s:7:"endLine";i:139;s:7:"methods";a:9:{s:23:"acceptsSucceedsProvider";a:6:{s:10:"methodName";s:23:"acceptsSucceedsProvider";s:9:"signature";s:32:"acceptsSucceedsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:26;s:7:"endLine";i:33;s:3:"ccn";i:1;}s:20:"acceptsFailsProvider";a:6:{s:10:"methodName";s:20:"acceptsFailsProvider";s:9:"signature";s:29:"acceptsFailsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:35;s:7:"endLine";i:42;s:3:"ccn";i:1;}s:28:"assertEqualsSucceedsProvider";a:6:{s:10:"methodName";s:28:"assertEqualsSucceedsProvider";s:9:"signature";s:37:"assertEqualsSucceedsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:44;s:7:"endLine";i:64;s:3:"ccn";i:1;}s:25:"assertEqualsFailsProvider";a:6:{s:10:"methodName";s:25:"assertEqualsFailsProvider";s:9:"signature";s:34:"assertEqualsFailsProvider(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:66;s:7:"endLine";i:94;s:3:"ccn";i:1;}s:5:"setUp";a:6:{s:10:"methodName";s:5:"setUp";s:9:"signature";s:13:"setUp(): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:96;s:7:"endLine";i:100;s:3:"ccn";i:1;}s:19:"testAcceptsSucceeds";a:6:{s:10:"methodName";s:19:"testAcceptsSucceeds";s:9:"signature";s:45:"testAcceptsSucceeds($expected, $actual): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:102;s:7:"endLine";i:108;s:3:"ccn";i:1;}s:16:"testAcceptsFails";a:6:{s:10:"methodName";s:16:"testAcceptsFails";s:9:"signature";s:42:"testAcceptsFails($expected, $actual): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:110;s:7:"endLine";i:116;s:3:"ccn";i:1;}s:24:"testAssertEqualsSucceeds";a:6:{s:10:"methodName";s:24:"testAssertEqualsSucceeds";s:9:"signature";s:58:"testAssertEqualsSucceeds($expected, $actual, $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:118;s:7:"endLine";i:129;s:3:"ccn";i:2;}s:21:"testAssertEqualsFails";a:6:{s:10:"methodName";s:21:"testAssertEqualsFails";s:9:"signature";s:65:"testAssertEqualsFails($expected, $actual, $message, $delta): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:131;s:7:"endLine";i:138;s:3:"ccn";i:1;}}}}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:140;s:18:"commentLinesOfCode";i:10;s:21:"nonCommentLinesOfCode";i:130;}s:15:"ignoredLinesFor";a:9:{i:0;i:18;i:1;i:19;i:2;i:20;i:3;i:21;i:4;i:22;i:5;i:102;i:6;i:110;i:7;i:118;i:8;i:131;}s:17:"executableLinesIn";a:69:{i:18;i:1;i:19;i:2;i:20;i:3;i:21;i:4;i:28;i:6;i:29;i:6;i:30;i:6;i:31;i:6;i:32;i:6;i:37;i:7;i:38;i:7;i:39;i:7;i:40;i:7;i:41;i:7;i:47;i:8;i:48;i:9;i:49;i:10;i:50;i:11;i:51;i:12;i:52;i:13;i:54;i:14;i:55;i:15;i:57;i:16;i:58;i:16;i:59;i:16;i:60;i:16;i:61;i:16;i:62;i:16;i:63;i:16;i:68;i:17;i:69;i:18;i:72;i:19;i:73;i:20;i:74;i:21;i:75;i:22;i:76;i:23;i:77;i:24;i:79;i:25;i:80;i:26;i:81;i:27;i:82;i:28;i:84;i:29;i:85;i:30;i:87;i:31;i:88;i:31;i:89;i:31;i:90;i:31;i:91;i:31;i:92;i:31;i:93;i:31;i:98;i:32;i:99;i:33;i:102;i:34;i:105;i:35;i:106;i:35;i:107;i:35;i:110;i:36;i:113;i:37;i:114;i:37;i:115;i:37;i:118;i:38;i:121;i:39;i:124;i:40;i:125;i:41;i:128;i:42;i:131;i:43;i:134;i:44;i:135;i:45;i:137;i:46;}}