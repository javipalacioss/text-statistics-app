a:6:{s:9:"classesIn";a:1:{s:37:"SebastianBergmann\Type\SimpleTypeTest";a:6:{s:4:"name";s:14:"SimpleTypeTest";s:14:"namespacedName";s:37:"SebastianBergmann\Type\SimpleTypeTest";s:9:"namespace";s:22:"SebastianBergmann\Type";s:9:"startLine";i:19;s:7:"endLine";i:175;s:7:"methods";a:18:{s:15:"assignablePairs";a:6:{s:10:"methodName";s:15:"assignablePairs";s:9:"signature";s:24:"assignablePairs(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:30;s:7:"endLine";i:41;s:3:"ccn";i:1;}s:18:"notAssignablePairs";a:6:{s:10:"methodName";s:18:"notAssignablePairs";s:9:"signature";s:27:"notAssignablePairs(): array";s:10:"visibility";s:6:"public";s:9:"startLine";i:43;s:7:"endLine";i:52;s:3:"ccn";i:1;}s:13:"testCanBeBool";a:6:{s:10:"methodName";s:13:"testCanBeBool";s:9:"signature";s:21:"testCanBeBool(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:54;s:7:"endLine";i:59;s:3:"ccn";i:1;}s:16:"testCanBeBoolean";a:6:{s:10:"methodName";s:16:"testCanBeBoolean";s:9:"signature";s:24:"testCanBeBoolean(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:61;s:7:"endLine";i:66;s:3:"ccn";i:1;}s:15:"testCanBeDouble";a:6:{s:10:"methodName";s:15:"testCanBeDouble";s:9:"signature";s:23:"testCanBeDouble(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:68;s:7:"endLine";i:73;s:3:"ccn";i:1;}s:14:"testCanBeFloat";a:6:{s:10:"methodName";s:14:"testCanBeFloat";s:9:"signature";s:22:"testCanBeFloat(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:75;s:7:"endLine";i:80;s:3:"ccn";i:1;}s:13:"testCanBeReal";a:6:{s:10:"methodName";s:13:"testCanBeReal";s:9:"signature";s:21:"testCanBeReal(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:82;s:7:"endLine";i:87;s:3:"ccn";i:1;}s:12:"testCanBeInt";a:6:{s:10:"methodName";s:12:"testCanBeInt";s:9:"signature";s:20:"testCanBeInt(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:89;s:7:"endLine";i:94;s:3:"ccn";i:1;}s:16:"testCanBeInteger";a:6:{s:10:"methodName";s:16:"testCanBeInteger";s:9:"signature";s:24:"testCanBeInteger(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:96;s:7:"endLine";i:101;s:3:"ccn";i:1;}s:14:"testCanBeArray";a:6:{s:10:"methodName";s:14:"testCanBeArray";s:9:"signature";s:22:"testCanBeArray(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:103;s:7:"endLine";i:108;s:3:"ccn";i:1;}s:15:"testCanBeArray2";a:6:{s:10:"methodName";s:15:"testCanBeArray2";s:9:"signature";s:23:"testCanBeArray2(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:110;s:7:"endLine";i:115;s:3:"ccn";i:1;}s:16:"testMayAllowNull";a:6:{s:10:"methodName";s:16:"testMayAllowNull";s:9:"signature";s:24:"testMayAllowNull(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:117;s:7:"endLine";i:122;s:3:"ccn";i:1;}s:19:"testMayNotAllowNull";a:6:{s:10:"methodName";s:19:"testMayNotAllowNull";s:9:"signature";s:27:"testMayNotAllowNull(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:124;s:7:"endLine";i:129;s:3:"ccn";i:1;}s:16:"testIsAssignable";a:6:{s:10:"methodName";s:16:"testIsAssignable";s:9:"signature";s:104:"testIsAssignable(SebastianBergmann\Type\Type $assignTo, SebastianBergmann\Type\Type $assignedType): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:131;s:7:"endLine";i:135;s:3:"ccn";i:1;}s:19:"testIsNotAssignable";a:6:{s:10:"methodName";s:19:"testIsNotAssignable";s:9:"signature";s:107:"testIsNotAssignable(SebastianBergmann\Type\Type $assignTo, SebastianBergmann\Type\Type $assignedType): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:137;s:7:"endLine";i:141;s:3:"ccn";i:1;}s:16:"testCanHaveValue";a:6:{s:10:"methodName";s:16:"testCanHaveValue";s:9:"signature";s:24:"testCanHaveValue(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:143;s:7:"endLine";i:146;s:3:"ccn";i:1;}s:23:"testCanBeQueriedForType";a:6:{s:10:"methodName";s:23:"testCanBeQueriedForType";s:9:"signature";s:31:"testCanBeQueriedForType(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:148;s:7:"endLine";i:167;s:3:"ccn";i:1;}s:18:"testNormalizesName";a:6:{s:10:"methodName";s:18:"testNormalizesName";s:9:"signature";s:26:"testNormalizesName(): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:169;s:7:"endLine";i:174;s:3:"ccn";i:1;}}}}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:176;s:18:"commentLinesOfCode";i:8;s:21:"nonCommentLinesOfCode";i:168;}s:15:"ignoredLinesFor";a:12:{i:0;i:19;i:1;i:20;i:2;i:21;i:3;i:22;i:4;i:23;i:5;i:24;i:6;i:25;i:7;i:26;i:8;i:27;i:9;i:28;i:10;i:131;i:11;i:137;}s:17:"executableLinesIn";a:70:{i:19;i:1;i:20;i:2;i:21;i:3;i:22;i:4;i:23;i:5;i:24;i:6;i:25;i:7;i:26;i:8;i:27;i:9;i:32;i:10;i:33;i:10;i:34;i:10;i:35;i:10;i:36;i:10;i:37;i:10;i:38;i:10;i:39;i:10;i:40;i:10;i:45;i:11;i:46;i:11;i:47;i:11;i:48;i:11;i:49;i:11;i:50;i:11;i:51;i:11;i:56;i:12;i:58;i:13;i:63;i:14;i:65;i:15;i:70;i:16;i:72;i:17;i:77;i:18;i:79;i:19;i:84;i:20;i:86;i:21;i:91;i:22;i:93;i:23;i:98;i:24;i:100;i:25;i:105;i:26;i:107;i:27;i:112;i:28;i:114;i:29;i:119;i:30;i:121;i:31;i:126;i:32;i:128;i:33;i:131;i:34;i:134;i:35;i:137;i:36;i:140;i:37;i:145;i:38;i:150;i:39;i:152;i:40;i:153;i:41;i:154;i:42;i:155;i:43;i:156;i:44;i:157;i:45;i:158;i:46;i:159;i:47;i:160;i:48;i:161;i:49;i:162;i:50;i:163;i:51;i:164;i:52;i:165;i:53;i:166;i:54;i:171;i:55;i:173;i:56;}}