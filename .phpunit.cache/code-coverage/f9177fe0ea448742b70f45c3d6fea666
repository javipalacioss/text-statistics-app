a:6:{s:9:"classesIn";a:0:{}s:8:"traitsIn";a:0:{}s:11:"functionsIn";a:181:{s:35:"PHPUnit\Framework\assertArrayHasKey";a:7:{s:4:"name";s:17:"assertArrayHasKey";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertArrayHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"assertArrayHasKey(int|string $key, array|\ArrayAccess $array, string $message): void";s:9:"startLine";i:83;s:7:"endLine";i:86;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertArrayNotHasKey";a:7:{s:4:"name";s:20:"assertArrayNotHasKey";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertArrayNotHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"assertArrayNotHasKey(int|string $key, array|\ArrayAccess $array, string $message): void";s:9:"startLine";i:100;s:7:"endLine";i:103;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertIsList";a:7:{s:4:"name";s:12:"assertIsList";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertIsList";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsList(array $array, string $message): void";s:9:"startLine";i:114;s:7:"endLine";i:117;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertContains";a:7:{s:4:"name";s:14:"assertContains";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertContains(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:131;s:7:"endLine";i:134;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertContainsEquals";a:7:{s:4:"name";s:20:"assertContainsEquals";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertContainsEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:78:"assertContainsEquals(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:145;s:7:"endLine";i:148;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertNotContains";a:7:{s:4:"name";s:17:"assertNotContains";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertNotContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertNotContains(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:162;s:7:"endLine";i:165;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertNotContainsEquals";a:7:{s:4:"name";s:23:"assertNotContainsEquals";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertNotContainsEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"assertNotContainsEquals(mixed $needle, iterable $haystack, string $message): void";s:9:"startLine";i:176;s:7:"endLine";i:179;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertContainsOnly";a:7:{s:4:"name";s:18:"assertContainsOnly";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertContainsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertContainsOnly(string $type, iterable $haystack, ?bool $isNativeType, string $message): void";s:9:"startLine";i:193;s:7:"endLine";i:196;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertContainsOnlyInstancesOf";a:7:{s:4:"name";s:29:"assertContainsOnlyInstancesOf";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertContainsOnlyInstancesOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertContainsOnlyInstancesOf(string $className, iterable $haystack, string $message): void";s:9:"startLine";i:210;s:7:"endLine";i:213;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertNotContainsOnly";a:7:{s:4:"name";s:21:"assertNotContainsOnly";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertNotContainsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:99:"assertNotContainsOnly(string $type, iterable $haystack, ?bool $isNativeType, string $message): void";s:9:"startLine";i:227;s:7:"endLine";i:230;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertCount";a:7:{s:4:"name";s:11:"assertCount";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertCount";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"assertCount(int $expectedCount, \Countable|iterable $haystack, string $message): void";s:9:"startLine";i:244;s:7:"endLine";i:247;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotCount";a:7:{s:4:"name";s:14:"assertNotCount";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotCount";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertNotCount(int $expectedCount, \Countable|iterable $haystack, string $message): void";s:9:"startLine";i:261;s:7:"endLine";i:264;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertEquals";a:7:{s:4:"name";s:12:"assertEquals";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertEquals(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:277;s:7:"endLine";i:280;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertEqualsCanonicalizing";a:7:{s:4:"name";s:26:"assertEqualsCanonicalizing";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"assertEqualsCanonicalizing(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:293;s:7:"endLine";i:296;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertEqualsIgnoringCase";a:7:{s:4:"name";s:24:"assertEqualsIgnoringCase";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"assertEqualsIgnoringCase(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:309;s:7:"endLine";i:312;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertEqualsWithDelta";a:7:{s:4:"name";s:21:"assertEqualsWithDelta";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertEqualsWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"assertEqualsWithDelta(mixed $expected, mixed $actual, float $delta, string $message): void";s:9:"startLine";i:325;s:7:"endLine";i:328;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertNotEquals";a:7:{s:4:"name";s:15:"assertNotEquals";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertNotEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertNotEquals(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:341;s:7:"endLine";i:344;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertNotEqualsCanonicalizing";a:7:{s:4:"name";s:29:"assertNotEqualsCanonicalizing";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertNotEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"assertNotEqualsCanonicalizing(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:357;s:7:"endLine";i:360;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertNotEqualsIgnoringCase";a:7:{s:4:"name";s:27:"assertNotEqualsIgnoringCase";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertNotEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"assertNotEqualsIgnoringCase(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:373;s:7:"endLine";i:376;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertNotEqualsWithDelta";a:7:{s:4:"name";s:24:"assertNotEqualsWithDelta";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertNotEqualsWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertNotEqualsWithDelta(mixed $expected, mixed $actual, float $delta, string $message): void";s:9:"startLine";i:389;s:7:"endLine";i:392;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertObjectEquals";a:7:{s:4:"name";s:18:"assertObjectEquals";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertObjectEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertObjectEquals(object $expected, object $actual, string $method, string $message): void";s:9:"startLine";i:403;s:7:"endLine";i:406;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertEmpty";a:7:{s:4:"name";s:11:"assertEmpty";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertEmpty(mixed $actual, string $message): void";s:9:"startLine";i:421;s:7:"endLine";i:424;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotEmpty";a:7:{s:4:"name";s:14:"assertNotEmpty";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertNotEmpty(mixed $actual, string $message): void";s:9:"startLine";i:439;s:7:"endLine";i:442;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertGreaterThan";a:7:{s:4:"name";s:17:"assertGreaterThan";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertGreaterThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertGreaterThan(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:455;s:7:"endLine";i:458;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\assertGreaterThanOrEqual";a:7:{s:4:"name";s:24:"assertGreaterThanOrEqual";s:14:"namespacedName";s:42:"PHPUnit\Framework\assertGreaterThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:471;s:7:"endLine";i:474;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertLessThan";a:7:{s:4:"name";s:14:"assertLessThan";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertLessThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertLessThan(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:487;s:7:"endLine";i:490;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertLessThanOrEqual";a:7:{s:4:"name";s:21:"assertLessThanOrEqual";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertLessThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:76:"assertLessThanOrEqual(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:503;s:7:"endLine";i:506;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertFileEquals";a:7:{s:4:"name";s:16:"assertFileEquals";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertFileEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:73:"assertFileEquals(string $expected, string $actual, string $message): void";s:9:"startLine";i:520;s:7:"endLine";i:523;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertFileEqualsCanonicalizing";a:7:{s:4:"name";s:30:"assertFileEqualsCanonicalizing";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertFileEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"assertFileEqualsCanonicalizing(string $expected, string $actual, string $message): void";s:9:"startLine";i:537;s:7:"endLine";i:540;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertFileEqualsIgnoringCase";a:7:{s:4:"name";s:28:"assertFileEqualsIgnoringCase";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertFileEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"assertFileEqualsIgnoringCase(string $expected, string $actual, string $message): void";s:9:"startLine";i:554;s:7:"endLine";i:557;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertFileNotEquals";a:7:{s:4:"name";s:19:"assertFileNotEquals";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertFileNotEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:76:"assertFileNotEquals(string $expected, string $actual, string $message): void";s:9:"startLine";i:571;s:7:"endLine";i:574;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertFileNotEqualsCanonicalizing";a:7:{s:4:"name";s:33:"assertFileNotEqualsCanonicalizing";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertFileNotEqualsCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"assertFileNotEqualsCanonicalizing(string $expected, string $actual, string $message): void";s:9:"startLine";i:588;s:7:"endLine";i:591;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertFileNotEqualsIgnoringCase";a:7:{s:4:"name";s:31:"assertFileNotEqualsIgnoringCase";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertFileNotEqualsIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertFileNotEqualsIgnoringCase(string $expected, string $actual, string $message): void";s:9:"startLine";i:605;s:7:"endLine";i:608;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertStringEqualsFile";a:7:{s:4:"name";s:22:"assertStringEqualsFile";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertStringEqualsFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:89:"assertStringEqualsFile(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:622;s:7:"endLine";i:625;s:3:"ccn";i:1;}s:54:"PHPUnit\Framework\assertStringEqualsFileCanonicalizing";a:7:{s:4:"name";s:36:"assertStringEqualsFileCanonicalizing";s:14:"namespacedName";s:54:"PHPUnit\Framework\assertStringEqualsFileCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:103:"assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:639;s:7:"endLine";i:642;s:3:"ccn";i:1;}s:52:"PHPUnit\Framework\assertStringEqualsFileIgnoringCase";a:7:{s:4:"name";s:34:"assertStringEqualsFileIgnoringCase";s:14:"namespacedName";s:52:"PHPUnit\Framework\assertStringEqualsFileIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:101:"assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:656;s:7:"endLine";i:659;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringNotEqualsFile";a:7:{s:4:"name";s:25:"assertStringNotEqualsFile";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringNotEqualsFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:92:"assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:673;s:7:"endLine";i:676;s:3:"ccn";i:1;}s:57:"PHPUnit\Framework\assertStringNotEqualsFileCanonicalizing";a:7:{s:4:"name";s:39:"assertStringNotEqualsFileCanonicalizing";s:14:"namespacedName";s:57:"PHPUnit\Framework\assertStringNotEqualsFileCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:106:"assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:690;s:7:"endLine";i:693;s:3:"ccn";i:1;}s:55:"PHPUnit\Framework\assertStringNotEqualsFileIgnoringCase";a:7:{s:4:"name";s:37:"assertStringNotEqualsFileIgnoringCase";s:14:"namespacedName";s:55:"PHPUnit\Framework\assertStringNotEqualsFileIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:104:"assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message): void";s:9:"startLine";i:707;s:7:"endLine";i:710;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsReadable";a:7:{s:4:"name";s:16:"assertIsReadable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsReadable(string $filename, string $message): void";s:9:"startLine";i:723;s:7:"endLine";i:726;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotReadable";a:7:{s:4:"name";s:19:"assertIsNotReadable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsNotReadable(string $filename, string $message): void";s:9:"startLine";i:739;s:7:"endLine";i:742;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsWritable";a:7:{s:4:"name";s:16:"assertIsWritable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsWritable(string $filename, string $message): void";s:9:"startLine";i:755;s:7:"endLine";i:758;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotWritable";a:7:{s:4:"name";s:19:"assertIsNotWritable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsNotWritable(string $filename, string $message): void";s:9:"startLine";i:771;s:7:"endLine";i:774;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\assertDirectoryExists";a:7:{s:4:"name";s:21:"assertDirectoryExists";s:14:"namespacedName";s:39:"PHPUnit\Framework\assertDirectoryExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertDirectoryExists(string $directory, string $message): void";s:9:"startLine";i:787;s:7:"endLine";i:790;s:3:"ccn";i:1;}s:45:"PHPUnit\Framework\assertDirectoryDoesNotExist";a:7:{s:4:"name";s:27:"assertDirectoryDoesNotExist";s:14:"namespacedName";s:45:"PHPUnit\Framework\assertDirectoryDoesNotExist";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"assertDirectoryDoesNotExist(string $directory, string $message): void";s:9:"startLine";i:803;s:7:"endLine";i:806;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertDirectoryIsReadable";a:7:{s:4:"name";s:25:"assertDirectoryIsReadable";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertDirectoryIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertDirectoryIsReadable(string $directory, string $message): void";s:9:"startLine";i:819;s:7:"endLine";i:822;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryIsNotReadable";a:7:{s:4:"name";s:28:"assertDirectoryIsNotReadable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryIsNotReadable(string $directory, string $message): void";s:9:"startLine";i:835;s:7:"endLine";i:838;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertDirectoryIsWritable";a:7:{s:4:"name";s:25:"assertDirectoryIsWritable";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertDirectoryIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"assertDirectoryIsWritable(string $directory, string $message): void";s:9:"startLine";i:851;s:7:"endLine";i:854;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertDirectoryIsNotWritable";a:7:{s:4:"name";s:28:"assertDirectoryIsNotWritable";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertDirectoryIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"assertDirectoryIsNotWritable(string $directory, string $message): void";s:9:"startLine";i:867;s:7:"endLine";i:870;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertFileExists";a:7:{s:4:"name";s:16:"assertFileExists";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertFileExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileExists(string $filename, string $message): void";s:9:"startLine";i:883;s:7:"endLine";i:886;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertFileDoesNotExist";a:7:{s:4:"name";s:22:"assertFileDoesNotExist";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertFileDoesNotExist";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertFileDoesNotExist(string $filename, string $message): void";s:9:"startLine";i:899;s:7:"endLine";i:902;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertFileIsReadable";a:7:{s:4:"name";s:20:"assertFileIsReadable";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertFileIsReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileIsReadable(string $file, string $message): void";s:9:"startLine";i:915;s:7:"endLine";i:918;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileIsNotReadable";a:7:{s:4:"name";s:23:"assertFileIsNotReadable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileIsNotReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileIsNotReadable(string $file, string $message): void";s:9:"startLine";i:931;s:7:"endLine";i:934;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertFileIsWritable";a:7:{s:4:"name";s:20:"assertFileIsWritable";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertFileIsWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertFileIsWritable(string $file, string $message): void";s:9:"startLine";i:947;s:7:"endLine";i:950;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertFileIsNotWritable";a:7:{s:4:"name";s:23:"assertFileIsNotWritable";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertFileIsNotWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertFileIsNotWritable(string $file, string $message): void";s:9:"startLine";i:963;s:7:"endLine";i:966;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertTrue";a:7:{s:4:"name";s:10:"assertTrue";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertTrue(mixed $condition, string $message): void";s:9:"startLine";i:981;s:7:"endLine";i:984;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotTrue";a:7:{s:4:"name";s:13:"assertNotTrue";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertNotTrue(mixed $condition, string $message): void";s:9:"startLine";i:999;s:7:"endLine";i:1002;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertFalse";a:7:{s:4:"name";s:11:"assertFalse";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertFalse(mixed $condition, string $message): void";s:9:"startLine";i:1017;s:7:"endLine";i:1020;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertNotFalse";a:7:{s:4:"name";s:14:"assertNotFalse";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertNotFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertNotFalse(mixed $condition, string $message): void";s:9:"startLine";i:1035;s:7:"endLine";i:1038;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertNull";a:7:{s:4:"name";s:10:"assertNull";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:48:"assertNull(mixed $actual, string $message): void";s:9:"startLine";i:1053;s:7:"endLine";i:1056;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotNull";a:7:{s:4:"name";s:13:"assertNotNull";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertNotNull(mixed $actual, string $message): void";s:9:"startLine";i:1071;s:7:"endLine";i:1074;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertFinite";a:7:{s:4:"name";s:12:"assertFinite";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertFinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:50:"assertFinite(mixed $actual, string $message): void";s:9:"startLine";i:1087;s:7:"endLine";i:1090;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertInfinite";a:7:{s:4:"name";s:14:"assertInfinite";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertInfinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertInfinite(mixed $actual, string $message): void";s:9:"startLine";i:1103;s:7:"endLine";i:1106;s:3:"ccn";i:1;}s:27:"PHPUnit\Framework\assertNan";a:7:{s:4:"name";s:9:"assertNan";s:14:"namespacedName";s:27:"PHPUnit\Framework\assertNan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"assertNan(mixed $actual, string $message): void";s:9:"startLine";i:1119;s:7:"endLine";i:1122;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertSame";a:7:{s:4:"name";s:10:"assertSame";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertSame";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:65:"assertSame(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:1143;s:7:"endLine";i:1146;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertNotSame";a:7:{s:4:"name";s:13:"assertNotSame";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertNotSame";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:68:"assertNotSame(mixed $expected, mixed $actual, string $message): void";s:9:"startLine";i:1161;s:7:"endLine";i:1164;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertInstanceOf";a:7:{s:4:"name";s:16:"assertInstanceOf";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"assertInstanceOf(string $expected, mixed $actual, string $message): void";s:9:"startLine";i:1184;s:7:"endLine";i:1187;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertNotInstanceOf";a:7:{s:4:"name";s:19:"assertNotInstanceOf";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertNotInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertNotInstanceOf(string $expected, mixed $actual, string $message): void";s:9:"startLine";i:1207;s:7:"endLine";i:1210;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertIsArray";a:7:{s:4:"name";s:13:"assertIsArray";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertIsArray";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsArray(mixed $actual, string $message): void";s:9:"startLine";i:1226;s:7:"endLine";i:1229;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\assertIsBool";a:7:{s:4:"name";s:12:"assertIsBool";s:14:"namespacedName";s:30:"PHPUnit\Framework\assertIsBool";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:50:"assertIsBool(mixed $actual, string $message): void";s:9:"startLine";i:1245;s:7:"endLine";i:1248;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\assertIsFloat";a:7:{s:4:"name";s:13:"assertIsFloat";s:14:"namespacedName";s:31:"PHPUnit\Framework\assertIsFloat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"assertIsFloat(mixed $actual, string $message): void";s:9:"startLine";i:1264;s:7:"endLine";i:1267;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\assertIsInt";a:7:{s:4:"name";s:11:"assertIsInt";s:14:"namespacedName";s:29:"PHPUnit\Framework\assertIsInt";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"assertIsInt(mixed $actual, string $message): void";s:9:"startLine";i:1283;s:7:"endLine";i:1286;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertIsNumeric";a:7:{s:4:"name";s:15:"assertIsNumeric";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertIsNumeric";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertIsNumeric(mixed $actual, string $message): void";s:9:"startLine";i:1302;s:7:"endLine";i:1305;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsObject";a:7:{s:4:"name";s:14:"assertIsObject";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsObject";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsObject(mixed $actual, string $message): void";s:9:"startLine";i:1321;s:7:"endLine";i:1324;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsResource";a:7:{s:4:"name";s:16:"assertIsResource";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsResource(mixed $actual, string $message): void";s:9:"startLine";i:1340;s:7:"endLine";i:1343;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertIsClosedResource";a:7:{s:4:"name";s:22:"assertIsClosedResource";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertIsClosedResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:60:"assertIsClosedResource(mixed $actual, string $message): void";s:9:"startLine";i:1359;s:7:"endLine";i:1362;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsString";a:7:{s:4:"name";s:14:"assertIsString";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsString(mixed $actual, string $message): void";s:9:"startLine";i:1378;s:7:"endLine";i:1381;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsScalar";a:7:{s:4:"name";s:14:"assertIsScalar";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsScalar";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsScalar(mixed $actual, string $message): void";s:9:"startLine";i:1397;s:7:"endLine";i:1400;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsCallable";a:7:{s:4:"name";s:16:"assertIsCallable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsCallable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsCallable(mixed $actual, string $message): void";s:9:"startLine";i:1416;s:7:"endLine";i:1419;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsIterable";a:7:{s:4:"name";s:16:"assertIsIterable";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsIterable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsIterable(mixed $actual, string $message): void";s:9:"startLine";i:1435;s:7:"endLine";i:1438;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsNotArray";a:7:{s:4:"name";s:16:"assertIsNotArray";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsNotArray";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsNotArray(mixed $actual, string $message): void";s:9:"startLine";i:1454;s:7:"endLine";i:1457;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\assertIsNotBool";a:7:{s:4:"name";s:15:"assertIsNotBool";s:14:"namespacedName";s:33:"PHPUnit\Framework\assertIsNotBool";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertIsNotBool(mixed $actual, string $message): void";s:9:"startLine";i:1473;s:7:"endLine";i:1476;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\assertIsNotFloat";a:7:{s:4:"name";s:16:"assertIsNotFloat";s:14:"namespacedName";s:34:"PHPUnit\Framework\assertIsNotFloat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"assertIsNotFloat(mixed $actual, string $message): void";s:9:"startLine";i:1492;s:7:"endLine";i:1495;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertIsNotInt";a:7:{s:4:"name";s:14:"assertIsNotInt";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertIsNotInt";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:52:"assertIsNotInt(mixed $actual, string $message): void";s:9:"startLine";i:1511;s:7:"endLine";i:1514;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\assertIsNotNumeric";a:7:{s:4:"name";s:18:"assertIsNotNumeric";s:14:"namespacedName";s:36:"PHPUnit\Framework\assertIsNotNumeric";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:56:"assertIsNotNumeric(mixed $actual, string $message): void";s:9:"startLine";i:1530;s:7:"endLine";i:1533;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotObject";a:7:{s:4:"name";s:17:"assertIsNotObject";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotObject";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertIsNotObject(mixed $actual, string $message): void";s:9:"startLine";i:1549;s:7:"endLine";i:1552;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotResource";a:7:{s:4:"name";s:19:"assertIsNotResource";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotResource(mixed $actual, string $message): void";s:9:"startLine";i:1568;s:7:"endLine";i:1571;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertIsNotClosedResource";a:7:{s:4:"name";s:25:"assertIsNotClosedResource";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertIsNotClosedResource";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"assertIsNotClosedResource(mixed $actual, string $message): void";s:9:"startLine";i:1587;s:7:"endLine";i:1590;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotString";a:7:{s:4:"name";s:17:"assertIsNotString";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertIsNotString(mixed $actual, string $message): void";s:9:"startLine";i:1606;s:7:"endLine";i:1609;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertIsNotScalar";a:7:{s:4:"name";s:17:"assertIsNotScalar";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertIsNotScalar";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"assertIsNotScalar(mixed $actual, string $message): void";s:9:"startLine";i:1625;s:7:"endLine";i:1628;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotCallable";a:7:{s:4:"name";s:19:"assertIsNotCallable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotCallable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotCallable(mixed $actual, string $message): void";s:9:"startLine";i:1644;s:7:"endLine";i:1647;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\assertIsNotIterable";a:7:{s:4:"name";s:19:"assertIsNotIterable";s:14:"namespacedName";s:37:"PHPUnit\Framework\assertIsNotIterable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"assertIsNotIterable(mixed $actual, string $message): void";s:9:"startLine";i:1663;s:7:"endLine";i:1666;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertMatchesRegularExpression";a:7:{s:4:"name";s:30:"assertMatchesRegularExpression";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertMatchesRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertMatchesRegularExpression(string $pattern, string $string, string $message): void";s:9:"startLine";i:1679;s:7:"endLine";i:1682;s:3:"ccn";i:1;}s:53:"PHPUnit\Framework\assertDoesNotMatchRegularExpression";a:7:{s:4:"name";s:35:"assertDoesNotMatchRegularExpression";s:14:"namespacedName";s:53:"PHPUnit\Framework\assertDoesNotMatchRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertDoesNotMatchRegularExpression(string $pattern, string $string, string $message): void";s:9:"startLine";i:1695;s:7:"endLine";i:1698;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\assertSameSize";a:7:{s:4:"name";s:14:"assertSameSize";s:14:"namespacedName";s:32:"PHPUnit\Framework\assertSameSize";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:97:"assertSameSize(\Countable|iterable $expected, \Countable|iterable $actual, string $message): void";s:9:"startLine";i:1713;s:7:"endLine";i:1716;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\assertNotSameSize";a:7:{s:4:"name";s:17:"assertNotSameSize";s:14:"namespacedName";s:35:"PHPUnit\Framework\assertNotSameSize";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertNotSameSize(\Countable|iterable $expected, \Countable|iterable $actual, string $message): void";s:9:"startLine";i:1731;s:7:"endLine";i:1734;s:3:"ccn";i:1;}s:63:"PHPUnit\Framework\assertStringContainsStringIgnoringLineEndings";a:7:{s:4:"name";s:45:"assertStringContainsStringIgnoringLineEndings";s:14:"namespacedName";s:63:"PHPUnit\Framework\assertStringContainsStringIgnoringLineEndings";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:102:"assertStringContainsStringIgnoringLineEndings(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1745;s:7:"endLine";i:1748;s:3:"ccn";i:1;}s:61:"PHPUnit\Framework\assertStringEqualsStringIgnoringLineEndings";a:7:{s:4:"name";s:43:"assertStringEqualsStringIgnoringLineEndings";s:14:"namespacedName";s:61:"PHPUnit\Framework\assertStringEqualsStringIgnoringLineEndings";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertStringEqualsStringIgnoringLineEndings(string $expected, string $actual, string $message): void";s:9:"startLine";i:1761;s:7:"endLine";i:1764;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringMatchesFormat";a:7:{s:4:"name";s:25:"assertStringMatchesFormat";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"assertStringMatchesFormat(string $format, string $string, string $message): void";s:9:"startLine";i:1777;s:7:"endLine";i:1780;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertStringNotMatchesFormat";a:7:{s:4:"name";s:28:"assertStringNotMatchesFormat";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertStringNotMatchesFormat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"assertStringNotMatchesFormat(string $format, string $string, string $message): void";s:9:"startLine";i:1793;s:7:"endLine";i:1796;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertStringMatchesFormatFile";a:7:{s:4:"name";s:29:"assertStringMatchesFormatFile";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertStringMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"assertStringMatchesFormatFile(string $formatFile, string $string, string $message): void";s:9:"startLine";i:1809;s:7:"endLine";i:1812;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertStringNotMatchesFormatFile";a:7:{s:4:"name";s:32:"assertStringNotMatchesFormatFile";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertStringNotMatchesFormatFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message): void";s:9:"startLine";i:1825;s:7:"endLine";i:1828;s:3:"ccn";i:1;}s:40:"PHPUnit\Framework\assertStringStartsWith";a:7:{s:4:"name";s:22:"assertStringStartsWith";s:14:"namespacedName";s:40:"PHPUnit\Framework\assertStringStartsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:77:"assertStringStartsWith(string $prefix, string $string, string $message): void";s:9:"startLine";i:1844;s:7:"endLine";i:1847;s:3:"ccn";i:1;}s:43:"PHPUnit\Framework\assertStringStartsNotWith";a:7:{s:4:"name";s:25:"assertStringStartsNotWith";s:14:"namespacedName";s:43:"PHPUnit\Framework\assertStringStartsNotWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"assertStringStartsNotWith(string $prefix, string $string, string $message): void";s:9:"startLine";i:1863;s:7:"endLine";i:1866;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertStringContainsString";a:7:{s:4:"name";s:26:"assertStringContainsString";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertStringContainsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"assertStringContainsString(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1877;s:7:"endLine";i:1880;s:3:"ccn";i:1;}s:56:"PHPUnit\Framework\assertStringContainsStringIgnoringCase";a:7:{s:4:"name";s:38:"assertStringContainsStringIgnoringCase";s:14:"namespacedName";s:56:"PHPUnit\Framework\assertStringContainsStringIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertStringContainsStringIgnoringCase(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1891;s:7:"endLine";i:1894;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertStringNotContainsString";a:7:{s:4:"name";s:29:"assertStringNotContainsString";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertStringNotContainsString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:86:"assertStringNotContainsString(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1905;s:7:"endLine";i:1908;s:3:"ccn";i:1;}s:59:"PHPUnit\Framework\assertStringNotContainsStringIgnoringCase";a:7:{s:4:"name";s:41:"assertStringNotContainsStringIgnoringCase";s:14:"namespacedName";s:59:"PHPUnit\Framework\assertStringNotContainsStringIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:98:"assertStringNotContainsStringIgnoringCase(string $needle, string $haystack, string $message): void";s:9:"startLine";i:1919;s:7:"endLine";i:1922;s:3:"ccn";i:1;}s:38:"PHPUnit\Framework\assertStringEndsWith";a:7:{s:4:"name";s:20:"assertStringEndsWith";s:14:"namespacedName";s:38:"PHPUnit\Framework\assertStringEndsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"assertStringEndsWith(string $suffix, string $string, string $message): void";s:9:"startLine";i:1938;s:7:"endLine";i:1941;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\assertStringEndsNotWith";a:7:{s:4:"name";s:23:"assertStringEndsNotWith";s:14:"namespacedName";s:41:"PHPUnit\Framework\assertStringEndsNotWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:78:"assertStringEndsNotWith(string $suffix, string $string, string $message): void";s:9:"startLine";i:1957;s:7:"endLine";i:1960;s:3:"ccn";i:1;}s:44:"PHPUnit\Framework\assertXmlFileEqualsXmlFile";a:7:{s:4:"name";s:26:"assertXmlFileEqualsXmlFile";s:14:"namespacedName";s:44:"PHPUnit\Framework\assertXmlFileEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:1975;s:7:"endLine";i:1978;s:3:"ccn";i:1;}s:47:"PHPUnit\Framework\assertXmlFileNotEqualsXmlFile";a:7:{s:4:"name";s:29:"assertXmlFileNotEqualsXmlFile";s:14:"namespacedName";s:47:"PHPUnit\Framework\assertXmlFileNotEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:94:"assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:1992;s:7:"endLine";i:1995;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertXmlStringEqualsXmlFile";a:7:{s:4:"name";s:28:"assertXmlStringEqualsXmlFile";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertXmlStringEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:92:"assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml, string $message): void";s:9:"startLine";i:2009;s:7:"endLine";i:2012;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertXmlStringNotEqualsXmlFile";a:7:{s:4:"name";s:31:"assertXmlStringNotEqualsXmlFile";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertXmlStringNotEqualsXmlFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml, string $message): void";s:9:"startLine";i:2026;s:7:"endLine";i:2029;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertXmlStringEqualsXmlString";a:7:{s:4:"name";s:30:"assertXmlStringEqualsXmlString";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertXmlStringEqualsXmlString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message): void";s:9:"startLine";i:2043;s:7:"endLine";i:2046;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertXmlStringNotEqualsXmlString";a:7:{s:4:"name";s:33:"assertXmlStringNotEqualsXmlString";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertXmlStringNotEqualsXmlString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message): void";s:9:"startLine";i:2060;s:7:"endLine";i:2063;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertThat";a:7:{s:4:"name";s:10:"assertThat";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertThat";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertThat(mixed $value, PHPUnit\Framework\Constraint\Constraint $constraint, string $message): void";s:9:"startLine";i:2076;s:7:"endLine";i:2079;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\assertJson";a:7:{s:4:"name";s:10:"assertJson";s:14:"namespacedName";s:28:"PHPUnit\Framework\assertJson";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"assertJson(string $actualJson, string $message): void";s:9:"startLine";i:2092;s:7:"endLine";i:2095;s:3:"ccn";i:1;}s:50:"PHPUnit\Framework\assertJsonStringEqualsJsonString";a:7:{s:4:"name";s:32:"assertJsonStringEqualsJsonString";s:14:"namespacedName";s:50:"PHPUnit\Framework\assertJsonStringEqualsJsonString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:97:"assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message): void";s:9:"startLine";i:2108;s:7:"endLine";i:2111;s:3:"ccn";i:1;}s:53:"PHPUnit\Framework\assertJsonStringNotEqualsJsonString";a:7:{s:4:"name";s:35:"assertJsonStringNotEqualsJsonString";s:14:"namespacedName";s:53:"PHPUnit\Framework\assertJsonStringNotEqualsJsonString";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:100:"assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message): void";s:9:"startLine";i:2124;s:7:"endLine";i:2127;s:3:"ccn";i:1;}s:48:"PHPUnit\Framework\assertJsonStringEqualsJsonFile";a:7:{s:4:"name";s:30:"assertJsonStringEqualsJsonFile";s:14:"namespacedName";s:48:"PHPUnit\Framework\assertJsonStringEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:95:"assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message): void";s:9:"startLine";i:2140;s:7:"endLine";i:2143;s:3:"ccn";i:1;}s:51:"PHPUnit\Framework\assertJsonStringNotEqualsJsonFile";a:7:{s:4:"name";s:33:"assertJsonStringNotEqualsJsonFile";s:14:"namespacedName";s:51:"PHPUnit\Framework\assertJsonStringNotEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:98:"assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message): void";s:9:"startLine";i:2156;s:7:"endLine";i:2159;s:3:"ccn";i:1;}s:46:"PHPUnit\Framework\assertJsonFileEqualsJsonFile";a:7:{s:4:"name";s:28:"assertJsonFileEqualsJsonFile";s:14:"namespacedName";s:46:"PHPUnit\Framework\assertJsonFileEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:93:"assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2172;s:7:"endLine";i:2175;s:3:"ccn";i:1;}s:49:"PHPUnit\Framework\assertJsonFileNotEqualsJsonFile";a:7:{s:4:"name";s:31:"assertJsonFileNotEqualsJsonFile";s:14:"namespacedName";s:49:"PHPUnit\Framework\assertJsonFileNotEqualsJsonFile";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message): void";s:9:"startLine";i:2188;s:7:"endLine";i:2191;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalAnd";a:7:{s:4:"name";s:10:"logicalAnd";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalAnd";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"logicalAnd(mixed $constraints): PHPUnit\Framework\Constraint\LogicalAnd";s:9:"startLine";i:2198;s:7:"endLine";i:2201;s:3:"ccn";i:1;}s:27:"PHPUnit\Framework\logicalOr";a:7:{s:4:"name";s:9:"logicalOr";s:14:"namespacedName";s:27:"PHPUnit\Framework\logicalOr";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"logicalOr(mixed $constraints): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2205;s:7:"endLine";i:2208;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalNot";a:7:{s:4:"name";s:10:"logicalNot";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalNot";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:104:"logicalNot(PHPUnit\Framework\Constraint\Constraint $constraint): PHPUnit\Framework\Constraint\LogicalNot";s:9:"startLine";i:2212;s:7:"endLine";i:2215;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\logicalXor";a:7:{s:4:"name";s:10:"logicalXor";s:14:"namespacedName";s:28:"PHPUnit\Framework\logicalXor";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"logicalXor(mixed $constraints): PHPUnit\Framework\Constraint\LogicalXor";s:9:"startLine";i:2219;s:7:"endLine";i:2222;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\anything";a:7:{s:4:"name";s:8:"anything";s:14:"namespacedName";s:26:"PHPUnit\Framework\anything";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:51:"anything(): PHPUnit\Framework\Constraint\IsAnything";s:9:"startLine";i:2226;s:7:"endLine";i:2229;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isTrue";a:7:{s:4:"name";s:6:"isTrue";s:14:"namespacedName";s:24:"PHPUnit\Framework\isTrue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isTrue(): PHPUnit\Framework\Constraint\IsTrue";s:9:"startLine";i:2233;s:7:"endLine";i:2236;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\callback";a:7:{s:4:"name";s:8:"callback";s:14:"namespacedName";s:26:"PHPUnit\Framework\callback";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"callback(callable $callback): PHPUnit\Framework\Constraint\Callback";s:9:"startLine";i:2240;s:7:"endLine";i:2243;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\isFalse";a:7:{s:4:"name";s:7:"isFalse";s:14:"namespacedName";s:25:"PHPUnit\Framework\isFalse";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"isFalse(): PHPUnit\Framework\Constraint\IsFalse";s:9:"startLine";i:2247;s:7:"endLine";i:2250;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isJson";a:7:{s:4:"name";s:6:"isJson";s:14:"namespacedName";s:24:"PHPUnit\Framework\isJson";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isJson(): PHPUnit\Framework\Constraint\IsJson";s:9:"startLine";i:2254;s:7:"endLine";i:2257;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isNull";a:7:{s:4:"name";s:6:"isNull";s:14:"namespacedName";s:24:"PHPUnit\Framework\isNull";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isNull(): PHPUnit\Framework\Constraint\IsNull";s:9:"startLine";i:2261;s:7:"endLine";i:2264;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\isFinite";a:7:{s:4:"name";s:8:"isFinite";s:14:"namespacedName";s:26:"PHPUnit\Framework\isFinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:49:"isFinite(): PHPUnit\Framework\Constraint\IsFinite";s:9:"startLine";i:2268;s:7:"endLine";i:2271;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isInfinite";a:7:{s:4:"name";s:10:"isInfinite";s:14:"namespacedName";s:28:"PHPUnit\Framework\isInfinite";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isInfinite(): PHPUnit\Framework\Constraint\IsInfinite";s:9:"startLine";i:2275;s:7:"endLine";i:2278;s:3:"ccn";i:1;}s:23:"PHPUnit\Framework\isNan";a:7:{s:4:"name";s:5:"isNan";s:14:"namespacedName";s:23:"PHPUnit\Framework\isNan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:43:"isNan(): PHPUnit\Framework\Constraint\IsNan";s:9:"startLine";i:2282;s:7:"endLine";i:2285;s:3:"ccn";i:1;}s:31:"PHPUnit\Framework\containsEqual";a:7:{s:4:"name";s:13:"containsEqual";s:14:"namespacedName";s:31:"PHPUnit\Framework\containsEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:82:"containsEqual(mixed $value): PHPUnit\Framework\Constraint\TraversableContainsEqual";s:9:"startLine";i:2289;s:7:"endLine";i:2292;s:3:"ccn";i:1;}s:35:"PHPUnit\Framework\containsIdentical";a:7:{s:4:"name";s:17:"containsIdentical";s:14:"namespacedName";s:35:"PHPUnit\Framework\containsIdentical";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:90:"containsIdentical(mixed $value): PHPUnit\Framework\Constraint\TraversableContainsIdentical";s:9:"startLine";i:2296;s:7:"endLine";i:2299;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\containsOnly";a:7:{s:4:"name";s:12:"containsOnly";s:14:"namespacedName";s:30:"PHPUnit\Framework\containsOnly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:80:"containsOnly(string $type): PHPUnit\Framework\Constraint\TraversableContainsOnly";s:9:"startLine";i:2306;s:7:"endLine";i:2309;s:3:"ccn";i:1;}s:41:"PHPUnit\Framework\containsOnlyInstancesOf";a:7:{s:4:"name";s:23:"containsOnlyInstancesOf";s:14:"namespacedName";s:41:"PHPUnit\Framework\containsOnlyInstancesOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:96:"containsOnlyInstancesOf(string $className): PHPUnit\Framework\Constraint\TraversableContainsOnly";s:9:"startLine";i:2316;s:7:"endLine";i:2319;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\arrayHasKey";a:7:{s:4:"name";s:11:"arrayHasKey";s:14:"namespacedName";s:29:"PHPUnit\Framework\arrayHasKey";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:70:"arrayHasKey(int|string $key): PHPUnit\Framework\Constraint\ArrayHasKey";s:9:"startLine";i:2323;s:7:"endLine";i:2326;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isList";a:7:{s:4:"name";s:6:"isList";s:14:"namespacedName";s:24:"PHPUnit\Framework\isList";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:45:"isList(): PHPUnit\Framework\Constraint\IsList";s:9:"startLine";i:2330;s:7:"endLine";i:2333;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\equalTo";a:7:{s:4:"name";s:7:"equalTo";s:14:"namespacedName";s:25:"PHPUnit\Framework\equalTo";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:59:"equalTo(mixed $value): PHPUnit\Framework\Constraint\IsEqual";s:9:"startLine";i:2337;s:7:"endLine";i:2340;s:3:"ccn";i:1;}s:39:"PHPUnit\Framework\equalToCanonicalizing";a:7:{s:4:"name";s:21:"equalToCanonicalizing";s:14:"namespacedName";s:39:"PHPUnit\Framework\equalToCanonicalizing";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"equalToCanonicalizing(mixed $value): PHPUnit\Framework\Constraint\IsEqualCanonicalizing";s:9:"startLine";i:2344;s:7:"endLine";i:2347;s:3:"ccn";i:1;}s:37:"PHPUnit\Framework\equalToIgnoringCase";a:7:{s:4:"name";s:19:"equalToIgnoringCase";s:14:"namespacedName";s:37:"PHPUnit\Framework\equalToIgnoringCase";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:83:"equalToIgnoringCase(mixed $value): PHPUnit\Framework\Constraint\IsEqualIgnoringCase";s:9:"startLine";i:2351;s:7:"endLine";i:2354;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\equalToWithDelta";a:7:{s:4:"name";s:16:"equalToWithDelta";s:14:"namespacedName";s:34:"PHPUnit\Framework\equalToWithDelta";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:91:"equalToWithDelta(mixed $value, float $delta): PHPUnit\Framework\Constraint\IsEqualWithDelta";s:9:"startLine";i:2358;s:7:"endLine";i:2361;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\isEmpty";a:7:{s:4:"name";s:7:"isEmpty";s:14:"namespacedName";s:25:"PHPUnit\Framework\isEmpty";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:47:"isEmpty(): PHPUnit\Framework\Constraint\IsEmpty";s:9:"startLine";i:2365;s:7:"endLine";i:2368;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isWritable";a:7:{s:4:"name";s:10:"isWritable";s:14:"namespacedName";s:28:"PHPUnit\Framework\isWritable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isWritable(): PHPUnit\Framework\Constraint\IsWritable";s:9:"startLine";i:2372;s:7:"endLine";i:2375;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\isReadable";a:7:{s:4:"name";s:10:"isReadable";s:14:"namespacedName";s:28:"PHPUnit\Framework\isReadable";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"isReadable(): PHPUnit\Framework\Constraint\IsReadable";s:9:"startLine";i:2379;s:7:"endLine";i:2382;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\directoryExists";a:7:{s:4:"name";s:15:"directoryExists";s:14:"namespacedName";s:33:"PHPUnit\Framework\directoryExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:63:"directoryExists(): PHPUnit\Framework\Constraint\DirectoryExists";s:9:"startLine";i:2386;s:7:"endLine";i:2389;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\fileExists";a:7:{s:4:"name";s:10:"fileExists";s:14:"namespacedName";s:28:"PHPUnit\Framework\fileExists";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:53:"fileExists(): PHPUnit\Framework\Constraint\FileExists";s:9:"startLine";i:2393;s:7:"endLine";i:2396;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\greaterThan";a:7:{s:4:"name";s:11:"greaterThan";s:14:"namespacedName";s:29:"PHPUnit\Framework\greaterThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"greaterThan(mixed $value): PHPUnit\Framework\Constraint\GreaterThan";s:9:"startLine";i:2400;s:7:"endLine";i:2403;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\greaterThanOrEqual";a:7:{s:4:"name";s:18:"greaterThanOrEqual";s:14:"namespacedName";s:36:"PHPUnit\Framework\greaterThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"greaterThanOrEqual(mixed $value): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2407;s:7:"endLine";i:2410;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\identicalTo";a:7:{s:4:"name";s:11:"identicalTo";s:14:"namespacedName";s:29:"PHPUnit\Framework\identicalTo";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"identicalTo(mixed $value): PHPUnit\Framework\Constraint\IsIdentical";s:9:"startLine";i:2414;s:7:"endLine";i:2417;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\isInstanceOf";a:7:{s:4:"name";s:12:"isInstanceOf";s:14:"namespacedName";s:30:"PHPUnit\Framework\isInstanceOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:74:"isInstanceOf(string $className): PHPUnit\Framework\Constraint\IsInstanceOf";s:9:"startLine";i:2421;s:7:"endLine";i:2424;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\isType";a:7:{s:4:"name";s:6:"isType";s:14:"namespacedName";s:24:"PHPUnit\Framework\isType";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:57:"isType(string $type): PHPUnit\Framework\Constraint\IsType";s:9:"startLine";i:2431;s:7:"endLine";i:2434;s:3:"ccn";i:1;}s:26:"PHPUnit\Framework\lessThan";a:7:{s:4:"name";s:8:"lessThan";s:14:"namespacedName";s:26:"PHPUnit\Framework\lessThan";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:61:"lessThan(mixed $value): PHPUnit\Framework\Constraint\LessThan";s:9:"startLine";i:2438;s:7:"endLine";i:2441;s:3:"ccn";i:1;}s:33:"PHPUnit\Framework\lessThanOrEqual";a:7:{s:4:"name";s:15:"lessThanOrEqual";s:14:"namespacedName";s:33:"PHPUnit\Framework\lessThanOrEqual";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:69:"lessThanOrEqual(mixed $value): PHPUnit\Framework\Constraint\LogicalOr";s:9:"startLine";i:2445;s:7:"endLine";i:2448;s:3:"ccn";i:1;}s:42:"PHPUnit\Framework\matchesRegularExpression";a:7:{s:4:"name";s:24:"matchesRegularExpression";s:14:"namespacedName";s:42:"PHPUnit\Framework\matchesRegularExpression";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:89:"matchesRegularExpression(string $pattern): PHPUnit\Framework\Constraint\RegularExpression";s:9:"startLine";i:2452;s:7:"endLine";i:2455;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\matches";a:7:{s:4:"name";s:7:"matches";s:14:"namespacedName";s:25:"PHPUnit\Framework\matches";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"matches(string $string): PHPUnit\Framework\Constraint\StringMatchesFormatDescription";s:9:"startLine";i:2459;s:7:"endLine";i:2462;s:3:"ccn";i:1;}s:34:"PHPUnit\Framework\stringStartsWith";a:7:{s:4:"name";s:16:"stringStartsWith";s:14:"namespacedName";s:34:"PHPUnit\Framework\stringStartsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:79:"stringStartsWith(string $prefix): PHPUnit\Framework\Constraint\StringStartsWith";s:9:"startLine";i:2469;s:7:"endLine";i:2472;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\stringContains";a:7:{s:4:"name";s:14:"stringContains";s:14:"namespacedName";s:32:"PHPUnit\Framework\stringContains";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"stringContains(string $string, bool $case): PHPUnit\Framework\Constraint\StringContains";s:9:"startLine";i:2479;s:7:"endLine";i:2482;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\stringEndsWith";a:7:{s:4:"name";s:14:"stringEndsWith";s:14:"namespacedName";s:32:"PHPUnit\Framework\stringEndsWith";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:75:"stringEndsWith(string $suffix): PHPUnit\Framework\Constraint\StringEndsWith";s:9:"startLine";i:2489;s:7:"endLine";i:2492;s:3:"ccn";i:1;}s:55:"PHPUnit\Framework\stringEqualsStringIgnoringLineEndings";a:7:{s:4:"name";s:37:"stringEqualsStringIgnoringLineEndings";s:14:"namespacedName";s:55:"PHPUnit\Framework\stringEqualsStringIgnoringLineEndings";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:121:"stringEqualsStringIgnoringLineEndings(string $string): PHPUnit\Framework\Constraint\StringEqualsStringIgnoringLineEndings";s:9:"startLine";i:2496;s:7:"endLine";i:2499;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\countOf";a:7:{s:4:"name";s:7:"countOf";s:14:"namespacedName";s:25:"PHPUnit\Framework\countOf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"countOf(int $count): PHPUnit\Framework\Constraint\Count";s:9:"startLine";i:2503;s:7:"endLine";i:2506;s:3:"ccn";i:1;}s:30:"PHPUnit\Framework\objectEquals";a:7:{s:4:"name";s:12:"objectEquals";s:14:"namespacedName";s:30:"PHPUnit\Framework\objectEquals";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:87:"objectEquals(object $object, string $method): PHPUnit\Framework\Constraint\ObjectEquals";s:9:"startLine";i:2510;s:7:"endLine";i:2513;s:3:"ccn";i:1;}s:21:"PHPUnit\Framework\any";a:7:{s:4:"name";s:3:"any";s:14:"namespacedName";s:21:"PHPUnit\Framework\any";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:56:"any(): PHPUnit\Framework\MockObject\Rule\AnyInvokedCount";s:9:"startLine";i:2521;s:7:"endLine";i:2524;s:3:"ccn";i:1;}s:23:"PHPUnit\Framework\never";a:7:{s:4:"name";s:5:"never";s:14:"namespacedName";s:23:"PHPUnit\Framework\never";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:55:"never(): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2531;s:7:"endLine";i:2534;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\atLeast";a:7:{s:4:"name";s:7:"atLeast";s:14:"namespacedName";s:25:"PHPUnit\Framework\atLeast";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:88:"atLeast(int $requiredInvocations): PHPUnit\Framework\MockObject\Rule\InvokedAtLeastCount";s:9:"startLine";i:2542;s:7:"endLine";i:2547;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\atLeastOnce";a:7:{s:4:"name";s:11:"atLeastOnce";s:14:"namespacedName";s:29:"PHPUnit\Framework\atLeastOnce";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"atLeastOnce(): PHPUnit\Framework\MockObject\Rule\InvokedAtLeastOnce";s:9:"startLine";i:2554;s:7:"endLine";i:2557;s:3:"ccn";i:1;}s:22:"PHPUnit\Framework\once";a:7:{s:4:"name";s:4:"once";s:14:"namespacedName";s:22:"PHPUnit\Framework\once";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:54:"once(): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2564;s:7:"endLine";i:2567;s:3:"ccn";i:1;}s:25:"PHPUnit\Framework\exactly";a:7:{s:4:"name";s:7:"exactly";s:14:"namespacedName";s:25:"PHPUnit\Framework\exactly";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:67:"exactly(int $count): PHPUnit\Framework\MockObject\Rule\InvokedCount";s:9:"startLine";i:2575;s:7:"endLine";i:2578;s:3:"ccn";i:1;}s:24:"PHPUnit\Framework\atMost";a:7:{s:4:"name";s:6:"atMost";s:14:"namespacedName";s:24:"PHPUnit\Framework\atMost";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:85:"atMost(int $allowedInvocations): PHPUnit\Framework\MockObject\Rule\InvokedAtMostCount";s:9:"startLine";i:2586;s:7:"endLine";i:2589;s:3:"ccn";i:1;}s:29:"PHPUnit\Framework\returnValue";a:7:{s:4:"name";s:11:"returnValue";s:14:"namespacedName";s:29:"PHPUnit\Framework\returnValue";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:71:"returnValue(mixed $value): PHPUnit\Framework\MockObject\Stub\ReturnStub";s:9:"startLine";i:2593;s:7:"endLine";i:2596;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnValueMap";a:7:{s:4:"name";s:14:"returnValueMap";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnValueMap";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"returnValueMap(array $valueMap): PHPUnit\Framework\MockObject\Stub\ReturnValueMap";s:9:"startLine";i:2600;s:7:"endLine";i:2603;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnArgument";a:7:{s:4:"name";s:14:"returnArgument";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnArgument";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"returnArgument(int $argumentIndex): PHPUnit\Framework\MockObject\Stub\ReturnArgument";s:9:"startLine";i:2607;s:7:"endLine";i:2610;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\returnCallback";a:7:{s:4:"name";s:14:"returnCallback";s:14:"namespacedName";s:32:"PHPUnit\Framework\returnCallback";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:84:"returnCallback(callable $callback): PHPUnit\Framework\MockObject\Stub\ReturnCallback";s:9:"startLine";i:2614;s:7:"endLine";i:2617;s:3:"ccn";i:1;}s:28:"PHPUnit\Framework\returnSelf";a:7:{s:4:"name";s:10:"returnSelf";s:14:"namespacedName";s:28:"PHPUnit\Framework\returnSelf";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:58:"returnSelf(): PHPUnit\Framework\MockObject\Stub\ReturnSelf";s:9:"startLine";i:2626;s:7:"endLine";i:2629;s:3:"ccn";i:1;}s:32:"PHPUnit\Framework\throwException";a:7:{s:4:"name";s:14:"throwException";s:14:"namespacedName";s:32:"PHPUnit\Framework\throwException";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:81:"throwException(Throwable $exception): PHPUnit\Framework\MockObject\Stub\Exception";s:9:"startLine";i:2633;s:7:"endLine";i:2636;s:3:"ccn";i:1;}s:36:"PHPUnit\Framework\onConsecutiveCalls";a:7:{s:4:"name";s:18:"onConsecutiveCalls";s:14:"namespacedName";s:36:"PHPUnit\Framework\onConsecutiveCalls";s:9:"namespace";s:17:"PHPUnit\Framework";s:9:"signature";s:72:"onConsecutiveCalls(): PHPUnit\Framework\MockObject\Stub\ConsecutiveCalls";s:9:"startLine";i:2640;s:7:"endLine";i:2645;s:3:"ccn";i:1;}}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:2647;s:18:"commentLinesOfCode";i:1313;s:21:"nonCommentLinesOfCode";i:1334;}s:15:"ignoredLinesFor";a:0:{}s:17:"executableLinesIn";a:365:{i:72;i:1;i:85;i:2;i:89;i:3;i:102;i:4;i:106;i:5;i:116;i:6;i:120;i:7;i:133;i:8;i:137;i:9;i:147;i:10;i:151;i:11;i:164;i:12;i:168;i:13;i:178;i:14;i:182;i:15;i:195;i:16;i:199;i:17;i:212;i:18;i:216;i:19;i:229;i:20;i:233;i:21;i:246;i:22;i:250;i:23;i:263;i:24;i:267;i:25;i:279;i:26;i:283;i:27;i:295;i:28;i:299;i:29;i:311;i:30;i:315;i:31;i:327;i:32;i:331;i:33;i:343;i:34;i:347;i:35;i:359;i:36;i:363;i:37;i:375;i:38;i:379;i:39;i:391;i:40;i:395;i:41;i:405;i:42;i:409;i:43;i:423;i:44;i:427;i:45;i:441;i:46;i:445;i:47;i:457;i:48;i:461;i:49;i:473;i:50;i:477;i:51;i:489;i:52;i:493;i:53;i:505;i:54;i:509;i:55;i:522;i:56;i:526;i:57;i:539;i:58;i:543;i:59;i:556;i:60;i:560;i:61;i:573;i:62;i:577;i:63;i:590;i:64;i:594;i:65;i:607;i:66;i:611;i:67;i:624;i:68;i:628;i:69;i:641;i:70;i:645;i:71;i:658;i:72;i:662;i:73;i:675;i:74;i:679;i:75;i:692;i:76;i:696;i:77;i:709;i:78;i:713;i:79;i:725;i:80;i:729;i:81;i:741;i:82;i:745;i:83;i:757;i:84;i:761;i:85;i:773;i:86;i:777;i:87;i:789;i:88;i:793;i:89;i:805;i:90;i:809;i:91;i:821;i:92;i:825;i:93;i:837;i:94;i:841;i:95;i:853;i:96;i:857;i:97;i:869;i:98;i:873;i:99;i:885;i:100;i:889;i:101;i:901;i:102;i:905;i:103;i:917;i:104;i:921;i:105;i:933;i:106;i:937;i:107;i:949;i:108;i:953;i:109;i:965;i:110;i:969;i:111;i:983;i:112;i:987;i:113;i:1001;i:114;i:1005;i:115;i:1019;i:116;i:1023;i:117;i:1037;i:118;i:1041;i:119;i:1055;i:120;i:1059;i:121;i:1073;i:122;i:1077;i:123;i:1089;i:124;i:1093;i:125;i:1105;i:126;i:1109;i:127;i:1121;i:128;i:1125;i:129;i:1145;i:130;i:1149;i:131;i:1163;i:132;i:1167;i:133;i:1186;i:134;i:1190;i:135;i:1209;i:136;i:1213;i:137;i:1228;i:138;i:1232;i:139;i:1247;i:140;i:1251;i:141;i:1266;i:142;i:1270;i:143;i:1285;i:144;i:1289;i:145;i:1304;i:146;i:1308;i:147;i:1323;i:148;i:1327;i:149;i:1342;i:150;i:1346;i:151;i:1361;i:152;i:1365;i:153;i:1380;i:154;i:1384;i:155;i:1399;i:156;i:1403;i:157;i:1418;i:158;i:1422;i:159;i:1437;i:160;i:1441;i:161;i:1456;i:162;i:1460;i:163;i:1475;i:164;i:1479;i:165;i:1494;i:166;i:1498;i:167;i:1513;i:168;i:1517;i:169;i:1532;i:170;i:1536;i:171;i:1551;i:172;i:1555;i:173;i:1570;i:174;i:1574;i:175;i:1589;i:176;i:1593;i:177;i:1608;i:178;i:1612;i:179;i:1627;i:180;i:1631;i:181;i:1646;i:182;i:1650;i:183;i:1665;i:184;i:1669;i:185;i:1681;i:186;i:1685;i:187;i:1697;i:188;i:1701;i:189;i:1715;i:190;i:1719;i:191;i:1733;i:192;i:1737;i:193;i:1747;i:194;i:1751;i:195;i:1763;i:196;i:1767;i:197;i:1779;i:198;i:1783;i:199;i:1795;i:200;i:1799;i:201;i:1811;i:202;i:1815;i:203;i:1827;i:204;i:1831;i:205;i:1846;i:206;i:1850;i:207;i:1865;i:208;i:1869;i:209;i:1879;i:210;i:1883;i:211;i:1893;i:212;i:1897;i:213;i:1907;i:214;i:1911;i:215;i:1921;i:216;i:1925;i:217;i:1940;i:218;i:1944;i:219;i:1959;i:220;i:1963;i:221;i:1977;i:222;i:1981;i:223;i:1994;i:224;i:1998;i:225;i:2011;i:226;i:2015;i:227;i:2028;i:228;i:2032;i:229;i:2045;i:230;i:2049;i:231;i:2062;i:232;i:2066;i:233;i:2078;i:234;i:2082;i:235;i:2094;i:236;i:2098;i:237;i:2110;i:238;i:2114;i:239;i:2126;i:240;i:2130;i:241;i:2142;i:242;i:2146;i:243;i:2158;i:244;i:2162;i:245;i:2174;i:246;i:2178;i:247;i:2190;i:248;i:2194;i:249;i:2200;i:250;i:2204;i:251;i:2207;i:252;i:2211;i:253;i:2214;i:254;i:2218;i:255;i:2221;i:256;i:2225;i:257;i:2228;i:258;i:2232;i:259;i:2235;i:260;i:2239;i:261;i:2242;i:262;i:2246;i:263;i:2249;i:264;i:2253;i:265;i:2256;i:266;i:2260;i:267;i:2263;i:268;i:2267;i:269;i:2270;i:270;i:2274;i:271;i:2277;i:272;i:2281;i:273;i:2284;i:274;i:2288;i:275;i:2291;i:276;i:2295;i:277;i:2298;i:278;i:2302;i:279;i:2308;i:280;i:2312;i:281;i:2318;i:282;i:2322;i:283;i:2325;i:284;i:2329;i:285;i:2332;i:286;i:2336;i:287;i:2339;i:288;i:2343;i:289;i:2346;i:290;i:2350;i:291;i:2353;i:292;i:2357;i:293;i:2360;i:294;i:2364;i:295;i:2367;i:296;i:2371;i:297;i:2374;i:298;i:2378;i:299;i:2381;i:300;i:2385;i:301;i:2388;i:302;i:2392;i:303;i:2395;i:304;i:2399;i:305;i:2402;i:306;i:2406;i:307;i:2409;i:308;i:2413;i:309;i:2416;i:310;i:2420;i:311;i:2423;i:312;i:2427;i:313;i:2433;i:314;i:2437;i:315;i:2440;i:316;i:2444;i:317;i:2447;i:318;i:2451;i:319;i:2454;i:320;i:2458;i:321;i:2461;i:322;i:2465;i:323;i:2471;i:324;i:2475;i:325;i:2481;i:326;i:2485;i:327;i:2491;i:328;i:2495;i:329;i:2498;i:330;i:2502;i:331;i:2505;i:332;i:2509;i:333;i:2512;i:334;i:2516;i:335;i:2523;i:336;i:2527;i:337;i:2533;i:338;i:2537;i:339;i:2544;i:340;i:2545;i:340;i:2546;i:340;i:2550;i:341;i:2556;i:342;i:2560;i:343;i:2566;i:344;i:2570;i:345;i:2577;i:346;i:2581;i:347;i:2588;i:348;i:2592;i:349;i:2595;i:350;i:2599;i:351;i:2602;i:352;i:2606;i:353;i:2609;i:354;i:2613;i:355;i:2616;i:356;i:2620;i:357;i:2628;i:358;i:2632;i:359;i:2635;i:360;i:2639;i:361;i:2642;i:362;i:2644;i:363;}}